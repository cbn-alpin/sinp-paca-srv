version: "3.7"

services:
  cms-nginx:
    image: nginx:1.18.0
    # https://hub.docker.com/_/nginx
    container_name: cms-nginx
    restart: unless-stopped
    ports:
      - "127.0.0.1:50080:80"
    depends_on:
      - cms-wordpress
    volumes:
      - wordpress-storage:/var/www/html
      - ./nginx/app.conf:/etc/nginx/conf.d/default.conf:ro

  cms-wordpress:
    build:
      context: ./wordpress/build
      dockerfile: Dockerfile
    image: wordpress:5.6.2-php7.4-fpm
    # https://hub.docker.com/_/wordpress
    container_name: cms-wordpress
    restart: unless-stopped
    env_file: .env
    expose:
      - 9000
    depends_on:
      - cms-mariadb
    environment:
      WORDPRESS_DB_HOST: cms-mariadb:3306
      WORDPRESS_DB_USER: ${MYSQL_USER}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
      WORDPRESS_DB_NAME: ${MYSQL_DB}
      WORDPRESS_TABLE_PREFIX: silene_
      # WORDPRESS_DEBUG : use an empty string to disable
      WORDPRESS_DEBUG: ""
      WORDPRESS_CONFIG_EXTRA: |
        //define('FORCE_SSL_ADMIN', true);
        define('WPMS_ON', true);
        define('WPMS_SMTP_PASS', '${WPMS_SMTP_PASS}');
    volumes:
      - wordpress-storage:/var/www/html
      - ./wordpress/home:/home/wp

  cms-wp-cli:
    image: wordpress:cli-2.4.0-php7.4
    # https://hub.docker.com/_/wordpress
    container_name: cms-wp-cli
    restart: "no"
    depends_on:
      - cms-mariadb
    entrypoint: wp
    volumes:
      - wordpress-storage:/var/www/html
      - ./wordpress/home:/home/wp

  cms-mariadb:
    image: mariadb:10.2.36
    # https://hub.docker.com/_/mariadb
    container_name: cms-mariadb
    restart: unless-stopped
    env_file: .env
    expose:
      - 3306
    environment:
      MYSQL_DATABASE: ${MYSQL_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # See : https://github.com/docker-library/mariadb/issues/160
      MYSQL_INITDB_SKIP_TZINFO: "yes"
    volumes:
      - db-storage:/var/lib/mysql
      #- ./database/initdb.d/:/docker-entrypoint-initdb.d/

  cms-adminer:
    image: adminer:4.8.0-standalone
    # https://hub.docker.com/_/adminer
    container_name: cms-adminer
    restart: unless-stopped
    ports:
      - "127.0.0.1:50081:8080"
    depends_on:
      - cms-mariadb
    environment:
      ADMINER_DESIGN: lucas-sandery
      ADMINER_DEFAULT_SERVER: cms-mariadb

  cms-volumerize:
    image: blacklabelops/volumerize:1.6
    # https://hub.docker.com/r/blacklabelops/volumerize/tags
    container_name: cms-volumerize
    restart: unless-stopped
    environment:
      # Stop containers before backup
      - VOLUMERIZE_CONTAINERS=cms-nginx cms-wordpress cms-mariadb cms-adminer
      # Local backup on Host
      - VOLUMERIZE_SOURCE1=/source
      - VOLUMERIZE_TARGET1=file:///backup
      - VOLUMERIZE_CACHE1=/volumerize-cache/local
      # Remote backup on Dropbox
      - DPBX_ACCESS_TOKEN=${DPBX_ACCESS_TOKEN}
      - VOLUMERIZE_SOURCE2=/source
      - VOLUMERIZE_TARGET2=dpbx:///cms-silene-eu
      - VOLUMERIZE_CACHE2=/volumerize-cache/dropbox
      # Schedule backup
      - TZ=Europe/Paris
      - VOLUMERIZE_JOBBER_TIME=0 0 2 * * *
      - VOLUMERIZE_FULL_IF_OLDER_THAN=7D
      #- VOLUMERIZE_DUPLICITY_OPTIONS=--dry-run
      # Remove old backups
      - JOB_NAME2=RemoveOldBackups
      - JOB_COMMAND2=/etc/volumerize/remove-older-than 7D --force
      - JOB_TIME2=0 0 0 * * *
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backup/:/backup
      - ./volumerize/docker-entrypoint.sh:/opt/volumerize/docker-entrypoint.sh
      - local-backup-cache-storage:/volumerize-cache/local
      - dropbox-backup-cache-storage:/volumerize-cache/dropbox
      - wordpress-storage:/source/cms-wordpress:ro
      - db-storage:/source/cms-mariadb:ro

volumes:
  local-backup-cache-storage:
  dropbox-backup-cache-storage:
  db-storage:
  wordpress-storage:

networks:
  default:
    external:
      name: nginx-proxy
